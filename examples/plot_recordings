#!/usr/bin/env python

import argparse
import matplotlib.pyplot as plt
import numpy as np

try:
    from pygesture import config
except ImportError:
    sys.path.insert(0, '..')
    from pygesture import config

from pygesture import processing
from pygesture import filestruct

parser = argparse.ArgumentParser(
        description="Plot recordings for a given session.")
parser.add_argument('pid',
        help="Participant ID.")
parser.add_argument('sid',
        help="Session ID.")
parser.add_argument('-c', '--config', default='config.py',
        help="Config file. Default is `config.py` (current directory).")
parser.add_argument('-r', '--raw-data', action='store_true',
        help="View raw data instead of processed.")
args = parser.parse_args()

config = config.Config(args.config)
pid = args.pid
sid = args.sid
rootdir = config.data_path
loc = sid[:3]
num_channels = len(config.channels)
input_range = config.daq.input_range

fs = config.daq.rate
fp = int(config.daq.rate / config.conditioner.m)
# exercise the filestruct module to get the processed files
session_dir = filestruct.find_session_dir(rootdir, pid, sid)
proc_dir = filestruct.get_processed_dir(session_dir)
raw_dir = filestruct.get_recording_dir(session_dir)
if args.raw_data:
    d = raw_dir
    rate = fs
else:
    d = proc_dir
    rate = fp
file_list = filestruct.get_recording_file_list(d)

spacer = np.linspace(0, 0.2*num_channels*input_range, num_channels)

data_list = []
for f in file_list:
    rec = processing.Recording(f, config.post_processor, loc=loc)
    data = rec.raw_data + spacer[::-1]
    t = np.arange(0, config.trial_duration, 1/float(rate))
    data_list.append((t, data, rec.trial_number,
        config.arm_gestures[rec.label][0])) 


def key_event(e=None):
    global curr_pos

    if e is None:
        curr_pos += 1
    elif e.key == "right":
        curr_pos += 1
    elif e.key == "left":
        curr_pos -= 1
    else:
        return
    curr_pos = curr_pos % len(data_list)

    ax.cla()
    ax.set_ylim([0-0.1*input_range, spacer[-1]+0.1*input_range])
    ax.plot(data_list[curr_pos][0], data_list[curr_pos][1])
    ax.set_title('{0} {1}, trial {2} label {3}'.format(pid, sid, 
        data_list[curr_pos][2], data_list[curr_pos][3]))
    # prompts
    ax.axvline(config.prompt_times[0], c='k', linewidth=2)
    ax.axvline(config.prompt_times[1], c='k', linewidth=2)
    # processing bounds
    ax.axvline(config.post_processor.gesture_bounds[0]/fp, c='r',
        linestyle='--')
    ax.axvline(config.post_processor.gesture_bounds[1]/fp, c='r',
        linestyle='--')
    # rest bounds
    ax.axvline(config.post_processor.rest_bounds[0]/fp, c='g',
        linestyle='--')
    ax.axvline(config.post_processor.rest_bounds[1]/fp, c='g',
        linestyle='--')
    fig.canvas.draw()

fig = plt.figure()
fig.canvas.mpl_connect('key_press_event', key_event)
ax = fig.add_subplot(111)
curr_pos = -1 
key_event()
plt.show()
